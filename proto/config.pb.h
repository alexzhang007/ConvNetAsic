// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class ConfigParameter;

enum ConfigParameter_MemoryType {
  ConfigParameter_MemoryType_ROM = 0,
  ConfigParameter_MemoryType_RAM = 1
};
bool ConfigParameter_MemoryType_IsValid(int value);
const ConfigParameter_MemoryType ConfigParameter_MemoryType_MemoryType_MIN = ConfigParameter_MemoryType_ROM;
const ConfigParameter_MemoryType ConfigParameter_MemoryType_MemoryType_MAX = ConfigParameter_MemoryType_RAM;
const int ConfigParameter_MemoryType_MemoryType_ARRAYSIZE = ConfigParameter_MemoryType_MemoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfigParameter_MemoryType_descriptor();
inline const ::std::string& ConfigParameter_MemoryType_Name(ConfigParameter_MemoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfigParameter_MemoryType_descriptor(), value);
}
inline bool ConfigParameter_MemoryType_Parse(
    const ::std::string& name, ConfigParameter_MemoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigParameter_MemoryType>(
    ConfigParameter_MemoryType_descriptor(), name, value);
}
// ===================================================================

class ConfigParameter : public ::google::protobuf::Message {
 public:
  ConfigParameter();
  virtual ~ConfigParameter();

  ConfigParameter(const ConfigParameter& from);

  inline ConfigParameter& operator=(const ConfigParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigParameter& default_instance();

  void Swap(ConfigParameter* other);

  // implements Message ----------------------------------------------

  ConfigParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigParameter& from);
  void MergeFrom(const ConfigParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConfigParameter_MemoryType MemoryType;
  static const MemoryType ROM = ConfigParameter_MemoryType_ROM;
  static const MemoryType RAM = ConfigParameter_MemoryType_RAM;
  static inline bool MemoryType_IsValid(int value) {
    return ConfigParameter_MemoryType_IsValid(value);
  }
  static const MemoryType MemoryType_MIN =
    ConfigParameter_MemoryType_MemoryType_MIN;
  static const MemoryType MemoryType_MAX =
    ConfigParameter_MemoryType_MemoryType_MAX;
  static const int MemoryType_ARRAYSIZE =
    ConfigParameter_MemoryType_MemoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MemoryType_descriptor() {
    return ConfigParameter_MemoryType_descriptor();
  }
  static inline const ::std::string& MemoryType_Name(MemoryType value) {
    return ConfigParameter_MemoryType_Name(value);
  }
  static inline bool MemoryType_Parse(const ::std::string& name,
      MemoryType* value) {
    return ConfigParameter_MemoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string model_file = 1;
  inline bool has_model_file() const;
  inline void clear_model_file();
  static const int kModelFileFieldNumber = 1;
  inline const ::std::string& model_file() const;
  inline void set_model_file(const ::std::string& value);
  inline void set_model_file(const char* value);
  inline void set_model_file(const char* value, size_t size);
  inline ::std::string* mutable_model_file();
  inline ::std::string* release_model_file();
  inline void set_allocated_model_file(::std::string* model_file);

  // optional int32 tech_node = 2 [default = 28];
  inline bool has_tech_node() const;
  inline void clear_tech_node();
  static const int kTechNodeFieldNumber = 2;
  inline ::google::protobuf::int32 tech_node() const;
  inline void set_tech_node(::google::protobuf::int32 value);

  // required int32 bit_width = 3;
  inline bool has_bit_width() const;
  inline void clear_bit_width();
  static const int kBitWidthFieldNumber = 3;
  inline ::google::protobuf::int32 bit_width() const;
  inline void set_bit_width(::google::protobuf::int32 value);

  // optional .config.ConfigParameter.MemoryType memory_type = 4 [default = ROM];
  inline bool has_memory_type() const;
  inline void clear_memory_type();
  static const int kMemoryTypeFieldNumber = 4;
  inline ::config::ConfigParameter_MemoryType memory_type() const;
  inline void set_memory_type(::config::ConfigParameter_MemoryType value);

  // required int32 reset_period = 5;
  inline bool has_reset_period() const;
  inline void clear_reset_period();
  static const int kResetPeriodFieldNumber = 5;
  inline ::google::protobuf::int32 reset_period() const;
  inline void set_reset_period(::google::protobuf::int32 value);

  // required int32 sim_period = 6;
  inline bool has_sim_period() const;
  inline void clear_sim_period();
  static const int kSimPeriodFieldNumber = 6;
  inline ::google::protobuf::int32 sim_period() const;
  inline void set_sim_period(::google::protobuf::int32 value);

  // optional double clk_freq = 7 [default = 1];
  inline bool has_clk_freq() const;
  inline void clear_clk_freq();
  static const int kClkFreqFieldNumber = 7;
  inline double clk_freq() const;
  inline void set_clk_freq(double value);

  // optional int32 append_buffer_capacity = 8 [default = 0];
  inline bool has_append_buffer_capacity() const;
  inline void clear_append_buffer_capacity();
  static const int kAppendBufferCapacityFieldNumber = 8;
  inline ::google::protobuf::int32 append_buffer_capacity() const;
  inline void set_append_buffer_capacity(::google::protobuf::int32 value);

  // optional int32 pixel_inference_rate = 9 [default = 100];
  inline bool has_pixel_inference_rate() const;
  inline void clear_pixel_inference_rate();
  static const int kPixelInferenceRateFieldNumber = 9;
  inline ::google::protobuf::int32 pixel_inference_rate() const;
  inline void set_pixel_inference_rate(::google::protobuf::int32 value);

  // optional string trace_file = 10 [default = ""];
  inline bool has_trace_file() const;
  inline void clear_trace_file();
  static const int kTraceFileFieldNumber = 10;
  inline const ::std::string& trace_file() const;
  inline void set_trace_file(const ::std::string& value);
  inline void set_trace_file(const char* value);
  inline void set_trace_file(const char* value, size_t size);
  inline ::std::string* mutable_trace_file();
  inline ::std::string* release_trace_file();
  inline void set_allocated_trace_file(::std::string* trace_file);

  // @@protoc_insertion_point(class_scope:config.ConfigParameter)
 private:
  inline void set_has_model_file();
  inline void clear_has_model_file();
  inline void set_has_tech_node();
  inline void clear_has_tech_node();
  inline void set_has_bit_width();
  inline void clear_has_bit_width();
  inline void set_has_memory_type();
  inline void clear_has_memory_type();
  inline void set_has_reset_period();
  inline void clear_has_reset_period();
  inline void set_has_sim_period();
  inline void clear_has_sim_period();
  inline void set_has_clk_freq();
  inline void clear_has_clk_freq();
  inline void set_has_append_buffer_capacity();
  inline void clear_has_append_buffer_capacity();
  inline void set_has_pixel_inference_rate();
  inline void clear_has_pixel_inference_rate();
  inline void set_has_trace_file();
  inline void clear_has_trace_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* model_file_;
  ::google::protobuf::int32 tech_node_;
  ::google::protobuf::int32 bit_width_;
  int memory_type_;
  ::google::protobuf::int32 reset_period_;
  double clk_freq_;
  ::google::protobuf::int32 sim_period_;
  ::google::protobuf::int32 append_buffer_capacity_;
  ::std::string* trace_file_;
  ::google::protobuf::int32 pixel_inference_rate_;
  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static ConfigParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// ConfigParameter

// required string model_file = 1;
inline bool ConfigParameter::has_model_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigParameter::set_has_model_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigParameter::clear_has_model_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigParameter::clear_model_file() {
  if (model_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_file_->clear();
  }
  clear_has_model_file();
}
inline const ::std::string& ConfigParameter::model_file() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.model_file)
  return *model_file_;
}
inline void ConfigParameter::set_model_file(const ::std::string& value) {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_file_ = new ::std::string;
  }
  model_file_->assign(value);
  // @@protoc_insertion_point(field_set:config.ConfigParameter.model_file)
}
inline void ConfigParameter::set_model_file(const char* value) {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_file_ = new ::std::string;
  }
  model_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:config.ConfigParameter.model_file)
}
inline void ConfigParameter::set_model_file(const char* value, size_t size) {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_file_ = new ::std::string;
  }
  model_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.ConfigParameter.model_file)
}
inline ::std::string* ConfigParameter::mutable_model_file() {
  set_has_model_file();
  if (model_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:config.ConfigParameter.model_file)
  return model_file_;
}
inline ::std::string* ConfigParameter::release_model_file() {
  clear_has_model_file();
  if (model_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_file_;
    model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigParameter::set_allocated_model_file(::std::string* model_file) {
  if (model_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_file_;
  }
  if (model_file) {
    set_has_model_file();
    model_file_ = model_file;
  } else {
    clear_has_model_file();
    model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:config.ConfigParameter.model_file)
}

// optional int32 tech_node = 2 [default = 28];
inline bool ConfigParameter::has_tech_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigParameter::set_has_tech_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigParameter::clear_has_tech_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigParameter::clear_tech_node() {
  tech_node_ = 28;
  clear_has_tech_node();
}
inline ::google::protobuf::int32 ConfigParameter::tech_node() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.tech_node)
  return tech_node_;
}
inline void ConfigParameter::set_tech_node(::google::protobuf::int32 value) {
  set_has_tech_node();
  tech_node_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.tech_node)
}

// required int32 bit_width = 3;
inline bool ConfigParameter::has_bit_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigParameter::set_has_bit_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigParameter::clear_has_bit_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigParameter::clear_bit_width() {
  bit_width_ = 0;
  clear_has_bit_width();
}
inline ::google::protobuf::int32 ConfigParameter::bit_width() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.bit_width)
  return bit_width_;
}
inline void ConfigParameter::set_bit_width(::google::protobuf::int32 value) {
  set_has_bit_width();
  bit_width_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.bit_width)
}

// optional .config.ConfigParameter.MemoryType memory_type = 4 [default = ROM];
inline bool ConfigParameter::has_memory_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigParameter::set_has_memory_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigParameter::clear_has_memory_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigParameter::clear_memory_type() {
  memory_type_ = 0;
  clear_has_memory_type();
}
inline ::config::ConfigParameter_MemoryType ConfigParameter::memory_type() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.memory_type)
  return static_cast< ::config::ConfigParameter_MemoryType >(memory_type_);
}
inline void ConfigParameter::set_memory_type(::config::ConfigParameter_MemoryType value) {
  assert(::config::ConfigParameter_MemoryType_IsValid(value));
  set_has_memory_type();
  memory_type_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.memory_type)
}

// required int32 reset_period = 5;
inline bool ConfigParameter::has_reset_period() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigParameter::set_has_reset_period() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigParameter::clear_has_reset_period() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigParameter::clear_reset_period() {
  reset_period_ = 0;
  clear_has_reset_period();
}
inline ::google::protobuf::int32 ConfigParameter::reset_period() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.reset_period)
  return reset_period_;
}
inline void ConfigParameter::set_reset_period(::google::protobuf::int32 value) {
  set_has_reset_period();
  reset_period_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.reset_period)
}

// required int32 sim_period = 6;
inline bool ConfigParameter::has_sim_period() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigParameter::set_has_sim_period() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigParameter::clear_has_sim_period() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigParameter::clear_sim_period() {
  sim_period_ = 0;
  clear_has_sim_period();
}
inline ::google::protobuf::int32 ConfigParameter::sim_period() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.sim_period)
  return sim_period_;
}
inline void ConfigParameter::set_sim_period(::google::protobuf::int32 value) {
  set_has_sim_period();
  sim_period_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.sim_period)
}

// optional double clk_freq = 7 [default = 1];
inline bool ConfigParameter::has_clk_freq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigParameter::set_has_clk_freq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigParameter::clear_has_clk_freq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigParameter::clear_clk_freq() {
  clk_freq_ = 1;
  clear_has_clk_freq();
}
inline double ConfigParameter::clk_freq() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.clk_freq)
  return clk_freq_;
}
inline void ConfigParameter::set_clk_freq(double value) {
  set_has_clk_freq();
  clk_freq_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.clk_freq)
}

// optional int32 append_buffer_capacity = 8 [default = 0];
inline bool ConfigParameter::has_append_buffer_capacity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigParameter::set_has_append_buffer_capacity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigParameter::clear_has_append_buffer_capacity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigParameter::clear_append_buffer_capacity() {
  append_buffer_capacity_ = 0;
  clear_has_append_buffer_capacity();
}
inline ::google::protobuf::int32 ConfigParameter::append_buffer_capacity() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.append_buffer_capacity)
  return append_buffer_capacity_;
}
inline void ConfigParameter::set_append_buffer_capacity(::google::protobuf::int32 value) {
  set_has_append_buffer_capacity();
  append_buffer_capacity_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.append_buffer_capacity)
}

// optional int32 pixel_inference_rate = 9 [default = 100];
inline bool ConfigParameter::has_pixel_inference_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigParameter::set_has_pixel_inference_rate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigParameter::clear_has_pixel_inference_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigParameter::clear_pixel_inference_rate() {
  pixel_inference_rate_ = 100;
  clear_has_pixel_inference_rate();
}
inline ::google::protobuf::int32 ConfigParameter::pixel_inference_rate() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.pixel_inference_rate)
  return pixel_inference_rate_;
}
inline void ConfigParameter::set_pixel_inference_rate(::google::protobuf::int32 value) {
  set_has_pixel_inference_rate();
  pixel_inference_rate_ = value;
  // @@protoc_insertion_point(field_set:config.ConfigParameter.pixel_inference_rate)
}

// optional string trace_file = 10 [default = ""];
inline bool ConfigParameter::has_trace_file() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigParameter::set_has_trace_file() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigParameter::clear_has_trace_file() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigParameter::clear_trace_file() {
  if (trace_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_file_->clear();
  }
  clear_has_trace_file();
}
inline const ::std::string& ConfigParameter::trace_file() const {
  // @@protoc_insertion_point(field_get:config.ConfigParameter.trace_file)
  return *trace_file_;
}
inline void ConfigParameter::set_trace_file(const ::std::string& value) {
  set_has_trace_file();
  if (trace_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_file_ = new ::std::string;
  }
  trace_file_->assign(value);
  // @@protoc_insertion_point(field_set:config.ConfigParameter.trace_file)
}
inline void ConfigParameter::set_trace_file(const char* value) {
  set_has_trace_file();
  if (trace_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_file_ = new ::std::string;
  }
  trace_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:config.ConfigParameter.trace_file)
}
inline void ConfigParameter::set_trace_file(const char* value, size_t size) {
  set_has_trace_file();
  if (trace_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_file_ = new ::std::string;
  }
  trace_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.ConfigParameter.trace_file)
}
inline ::std::string* ConfigParameter::mutable_trace_file() {
  set_has_trace_file();
  if (trace_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:config.ConfigParameter.trace_file)
  return trace_file_;
}
inline ::std::string* ConfigParameter::release_trace_file() {
  clear_has_trace_file();
  if (trace_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = trace_file_;
    trace_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConfigParameter::set_allocated_trace_file(::std::string* trace_file) {
  if (trace_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_file_;
  }
  if (trace_file) {
    set_has_trace_file();
    trace_file_ = trace_file;
  } else {
    clear_has_trace_file();
    trace_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:config.ConfigParameter.trace_file)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::config::ConfigParameter_MemoryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::ConfigParameter_MemoryType>() {
  return ::config::ConfigParameter_MemoryType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
